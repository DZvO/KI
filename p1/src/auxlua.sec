---------------------------------------------------------------------------
--  Aux.lua - Some helper functions for indigolog
--
--  Created: Mon Nov 09 09:15:24 2009
--  Copyright  2009-2010  Alexander Ferrein [alexander.ferrein@gmail.com]
--
----------------------------------------------------------------------------

--  This program is free software; you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation; either version 2 of the License, or
--  (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU Library General Public License for more details.
--
--  Read the full text in the LICENSE.GPL file in the doc directory.

-----------------------------------------------------------------------------
-- Class defines a simple class structure as a metatable from the
--    lua.wiki website
-- @param members is the object which is to be the new class
-- @return metatable
-- @usage myclass = {} local myclass_mt = Class(myclass)
-----------------------------------------------------------------------------


module("Aux", package.seeall)

function Class(members)
  members = members or {}
  local mt = {
    __metatable = members;
    __index     = members;
  }
  local function new(_, init)
    return setmetatable(init or {}, mt)
  end
  local function copy(obj, ...)
     local newobj = obj:new(unpack(arg))
     for n,v in pairs(obj) do newobj[n] = v end
     return newobj
  end
  members.new  = members.new  or new
  members.copy = members.copy or copy
  return mt
end

-----------------------------------------------------------------------------
-- tabcopy copies a table and its metatable to a fresh table, this
--    function was taken from Lua Gems; (c) by need to find out
--    ... however, we altered the original procedure. In case a copy
--    constructor exists for the metatable of object, i.e. the field
--    ['copy'] is non-empty, we do not copy the object but simply take
--    the reference of the original data field. We need to do that in
--    to keep objects of type FOL (defined in formula.lua) intact. One
--    advantage of the references is that variables in formulae are
--    only stored as a refernece, once we assign a value to this
--    variable, we simply call the assign procedure and no not need to
--    search for the resp. varable in the formula.
--
--    @param object -  the table to be copied
--    @return the copied table with a new memory address
-----------------------------------------------------------------------------

function tabcopy(object)
   local lookup_table = {}
   local function _copy(object)
      if _G.type(object) ~= "table" then
	 return object
      elseif lookup_table[object] then
	 return lookup_table[object]
      end
      local new_table = {}
      lookup_table[object] = new_table
      for index, value in pairs(object) do
	 if getmetatable(value) and getmetatable(value)['copy'] then	    
	    -- use an existing copy method (used for formulae)
--	    new_table[_copy(index)] = value:copy()
	    new_table[index] = value
	 else
	    new_table[_copy(index)] = _copy(value)
	 end
      end
      return setmetatable(new_table, getmetatable(object))
   end
   return _copy(object)
end

-- function tc()
--a= {1, goFloor.Cond} b = tabcopy(a) traverse(a) traverse(b)
-- end


-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
--
-- output functions
--
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

-- output is conditioned on verbose flag
dbg_output =
   function(l, ...)
      if  l <= debug_level then
	 print(...)
      end
   end
--

dbg = 
   function(l, f)
--      print("dbg", debug.traceback())
      if  l <= debug_level then	       
      return f()
      end
   end


-- unconditioned output
printf = 
   function(s,...)
--      print(debug.traceback())
      return io.write(s:format(...))
   end 

error = 
   function(s,...)
--      return io.write(s:format(...))
   end 

warning = 
   function(s,...)
      return io.write(s:format(...))
   end 


--  function print(...)
--     local s = debug.traceback()
--     io.write(s, unpack(arg))
--  end
-----------------------------------------------------------------------------
-- is -- indent string returns  a string indented by level indent
-- @param indent - integer indicating the depth as indentation 
-----------------------------------------------------------------------------

function indent_string(indent)
--   print(indent)
   local tab=""
   for i=1,indent-2 do tab=tab .. "  " end
   if indent > 1 then  tab = tab .. "|-" end
   return tab
end

-----------------------------------------------------------------------------
-- print table - outputs a flat table structure with indentation
--    @param t - the table to be printed
--           level - indentation level
-----------------------------------------------------------------------------

function travtab(t, level)
   if type(t) == "table" then
      level = level + 1
      printf("%s%s\n", indent_string(level), tostring(t))
      for i,v in ipairs(t) do travtab(v, level+1) end
   else
      local val
      if getmetatable(t) and getmetatable(t)['eval'] then
	 val = t:eval() else val = tostring(t) end
      printf("**%s%s\n", indent_string(level), val)   
   end
end

function traverse(t)
--   print("traverse")
--   debug.traceback() io.read()
   return travtab(t, 0)
end


-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
--
-- Helper function for accessing associative arrays
-- 
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
local HashDelim = "::"

function SetHash(value)
   local valuestring = ""
   if type(value) == "table" then
      for i,v in pairs(value) do 
	 if i == 1 then valuestring = value[1] 
	 else valuestring = valuestring .. HashDelim .. v end
      end
   else
      valuestring = tostring(value)
   end 
   return tostring(valuestring)
end

-----------------------------------------------------------------------------
-- Set - Created an associative array representing a set, i.e. each entry
--       in the set gets assigned the value true
--    @param  list - is a table with the set elements
-----------------------------------------------------------------------------

function Set (list)
   local set = {}
   for _, l in ipairs(list) do 
      set[SetHash(l)] = true end
   return set
end

-----------------------------------------------------------------------------
-- Retract - remove an element *value* from a Set *list*
--   @param set - the set from which the element is to be removed
--          value - the element to be removed
-----------------------------------------------------------------------------

function Retract(set, value)
--   print("Retract", value, set)
   for i, _ in pairs(set) do      
      if i == SetHash(value) then set[i] = nil end
   end
   return set
end

-----------------------------------------------------------------------------
-- RetractAll - removes all elements from a set
--    @param list - the set from which all elements are to be removed
-----------------------------------------------------------------------------

function RetractAll(set)
   for i, _ in pairs(set) do set[i] = nil  end
end


-----------------------------------------------------------------------------
-- Assert - store the element *value* in the set *set
--    @param value - the element to be added
--           set - the set to which the element should be added
-----------------------------------------------------------------------------

function Assert(set, ...)
   local set =  set or {}
   for i,v in ipairs(arg) do      
      set[SetHash(arg[i])] = arg[i+1]
      i = i + 1
   end
   return set
end
	 
function GetAll(set)
--   for i,v in pairs(set) do
--      print(i,v)
--   end
   return set
end

function GetArg(value, arg)
   local val = SetDehash(value)
   return val[arg]
end

function SetArgs(args)
   return SetHash(args)
end


function GetArgs(value)
   return SetDehash(value)
end


function GetFirst(set)   
   local j = 0
   for i, v in pairs (set) do 
--      print(i,v)
      return i, v
   end
--   return set[1]
end


-----------------------------------------------------------------------------
-- Split string  from (PhilippeLhoste) http://lua-users.org/wiki/SplitJoin

function split_string(str, pat)
   local t = {}  -- NOTE: use {n = 0} in Lua-5.0
   local fpat = "(.-)" .. pat
   local last_end = 1
   local s, e, cap = str:find(fpat, 1)
   while s do
      if s ~= 1 or cap ~= "" then
    	 table.insert(t,cap)
      end
      last_end = e+1
      s, e, cap = str:find(fpat, last_end)
   end
   if last_end <= #str then
      cap = str:sub(last_end)
      table.insert(t, cap)
   end
   return t
end

-----------------------------------------------------------------------------
-- SetDehash - breaks a string of the form "arg1::arg2::...::argn" into 
--     a table {arg1, arg2, ..., argn}
--
--     @param - a string value containing delimiters '::'
--     @return - the value table
-----------------------------------------------------------------------------

function SetDehash(value)
   return split_string(tostring(value), HashDelim)
end


function SetDehashTable(set)
   local tab = {}
   for i, v in pairs(set) do  
      local elem = SetDehash(v)
      table.insert(tab, #tab+1, elem )
   end
   return tab
end


-- -----------------------------------------------------------------------------
-- -- Member - check for set membership
-- --    @param value - the entry for which membership is queried
-- --           set - the set on which membership of *entry* is to be tested
-- --    @return boolean
-- -----------------------------------------------------------------------------

function Member(set, instance, value)      
   if set[SetHash(instance)]==value then return true end
   return false
end


-----------------------------------------------------------------------------
-- GetCellString - outputs the stringvalue *value* centered in a columns with
--                 width *col*
--    @param t - string value which needs to be output
--           col - the column width 
-----------------------------------------------------------------------------

function GetCellString_C(value, col)
   local mid = col / 2 + 0.5 * (col % 2)
   
   if value == nil then value = "" end

   local val  = string.sub(tostring(value), 1, col)
   local len = #val
   local offset = len/2 - 0.5*(len % 2)
   local lpad = mid - offset - 1
   local rpad = col - len - lpad
   
   local string = ""
   
   for i=1,lpad do string = string .. " " end
   string = string .. val
   for i=1,rpad do string = string .. " " end
   return string      
end

function GetCellString_L(value, col)
   local val = string.sub(tostring(value), 1, col)
   local len = #val 
   for i=1, col-len do val = val .. " " end
   return val
end
